@page "/"
@using WebClient.Dtos
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3 class="text-center">Register</h3>

<EditForm Model="@user" OnValidSubmit="HandleRegister" FormName="RegisterForm" RenderMode="InteractiveServer" class="card p-4 shadow-sm" style="max-width: 400px; margin: auto;">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText @bind-Value="user.Name" class="form-control" />
        <ValidationMessage For="@(() => user.Name)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Password</label>
        <InputText @bind-Value="user.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => user.Password)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Register</button>
</EditForm>

<div class="mt-3 text-center">
    <a href="/login">Already have an account? Login here</a>
</div>

@if (!string.IsNullOrEmpty(message))
{
        <div class="alert alert-info mt-3">@message</div>
}

@code {
    private UserDto user = new UserDto();
    private string message;

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && JSRuntime is not null)
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            Console.WriteLine($"User JSON: {userJson}");

            if (!string.IsNullOrEmpty(userJson))
            {
                Navigation.NavigateTo("/products", true);
            }
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            var client = HttpClientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7053");

            var response = await client.PostAsJsonAsync("api/auth/register", user);

            if (response.IsSuccessStatusCode)
            {
                message = "User registered successfully!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Registration failed: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }
}

