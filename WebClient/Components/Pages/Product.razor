@page "/products"
@using WebClient.Dtos
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3 class="text-center">Product List</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
        @message
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => message = null"></button>
    </div>
}

@if (products == null)
{
    <p>Loading products...</p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p>@product.Description</p>
                        <p>Price: @product.Price</p>
                        <p>Stock: @product.Stock</p>

                        <div class="input-group" style="max-width: 150px">
                            <button class="btn btn-secondary" @onclick="() => DecreaseQuantity(product.Id)">-</button>
                            <input class="form-control text-center" readonly value="@GetQuantity(product.Id)" />
                            <button class="btn btn-secondary" @onclick="() => IncreaseQuantity(product.Id, product.Stock)">+</button>
                        </div>

                        <button class="btn btn-primary mt-2" @onclick="() => AddToCart(product)">Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<ProductDto>? products;
    private List<CartItemDto> cartItems = new();
    private Dictionary<Guid, int> cartQuantities = new();
    private string message = "";

    private bool loaded = false;
    private Dictionary<Guid, int> cartItemsInStorage = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var client = HttpClientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7154");

            products = await client.GetFromJsonAsync<List<ProductDto>>("api/products");

            var existingCart = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cart");
            if (!string.IsNullOrEmpty(existingCart))
            {
                var cartList = System.Text.Json.JsonSerializer.Deserialize<List<CartItemDto>>(existingCart);

                foreach (var cartItem in cartList)
                {
                    var product = products.FirstOrDefault(p => p.Id == cartItem.Id);
                    if (product != null)
                    {
                        product.Stock -= cartItem.Quantity;
                        if (product.Stock < 0) product.Stock = 0;

                        cartItemsInStorage[product.Id] = cartItem.Quantity;
                    }
                }
            }

            StateHasChanged();
        }
    }

    private int GetQuantity(Guid productId)
    {
        return cartQuantities.TryGetValue(productId, out var qty) ? qty : 0;
    }

    private void IncreaseQuantity(Guid productId, int availableStock)
    {
        var current = GetQuantity(productId);
        if (current < availableStock)
        {
            cartQuantities[productId] = current + 1;
        }
    }

    private void DecreaseQuantity(Guid productId)
    {
        var current = GetQuantity(productId);
        if (current > 0)
        {
            cartQuantities[productId] = current - 1;
        }
    }

    private async Task AddToCart(ProductDto product)
    {
        var qty = GetQuantity(product.Id);
        if (qty <= 0) return;

        var existingCart = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cart");
        var cartList = string.IsNullOrEmpty(existingCart)
            ? new List<CartItemDto>()
            : System.Text.Json.JsonSerializer.Deserialize<List<CartItemDto>>(existingCart);

        var existingItem = cartList.FirstOrDefault(i => i.Id == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity += qty;
        }
        else
        {
            cartList.Add(new CartItemDto
                {
                    Id = product.Id,
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = qty
                });
        }

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cart", System.Text.Json.JsonSerializer.Serialize(cartList));

        message = $"{product.Name} added to cart ({qty})!";
        cartQuantities[product.Id] = 0;

        product.Stock -= qty;
        if (product.Stock < 0) product.Stock = 0;

        StateHasChanged();
    }
}
